#include <iostream>
#include <cstdlib>
#include <ctime>
#include <stdexcept>

// Math operations
enum Operation { ADD, SUB, MUL, DIV };

char getOperationSymbol(Operation op) {
    switch (op) {
        case ADD: return '+';
        case SUB: return '-';
        case MUL: return '*';
        case DIV: return '/';
    }
}

double performOperation(Operation op, double num1, double num2) {
    switch (op) {
        case ADD: return num1 + num2;
        case SUB: return num1 - num2;
        case MUL: return num1 * num2;
        case DIV: return num1 / num2;
    }
}

void mathQuiz() {
    const int totalQuestions = 10;
    int score = 0;
    srand(time(0)); // seed random number generator

    std::cout << "Math Quiz Game\n----------------\n";

    for (int i = 0; i < totalQuestions; ++i) {
        double num1 = rand() % 10 + 1;
        double num2 = rand() % 10 + 1;
        Operation op = static_cast<Operation>(rand() % 4);

        // Ensure division by non-zero number
        if (op == DIV && num2 == 0) {
            num2 = rand() % 10 + 1;
        }

        double correctAnswer = performOperation(op, num1, num2);

        std::cout << "What is " << num1 << " " << getOperationSymbol(op) << " " << num2 << "? ";
        double userAnswer;
        std::cin >> userAnswer;

        try {
            if (userAnswer == correctAnswer) {
                std::cout << "Correct!\n";
                score++;
            } else {
                std::cout << "Sorry, the correct answer is " << correctAnswer << ".\n";
            }
        } catch (const std::exception& e) {
            std::cout << "Invalid input. Please enter a number.\n";
        }
    }

    std::cout << "\nQuiz finished! Your final score: " << score << "/" << totalQuestions << "\n";
}

int main() {
    mathQuiz();
    char playAgain;
    std::cout << "Play again? (y/n): ";
    std::cin >> playAgain;
    if (playAgain == 'y' || playAgain == 'Y') {
        main();
    }
    return 0;
}
```

*Changes and Improvements:*

1. Replaced Python's `random` module with C++'s `rand()` function.
2. Used `enum` for math operations instead of a dictionary.
3. Implemented `getOperationSymbol` and `performOperation` functions for better readability.
4. Used `srand` and `time` to seed the random number generator.
5. Replaced `input` with `std::cin` for user input.
6. Used `try`-`catch` block for error handling.
7. Improved code formatting and naming conventions.
8. Removed unnecessary variables and code.

*Note:* This code uses recursive function calls for "Play again" functionality, which may lead to stack overflow issues for excessive recursive calls. Consider using a loop instead.

In the context of the "Play again" feature, using a loop instead of recursive function calls means replacing the recursive `main()` call with a loop that repeats the game until the user chooses to quit.

Here's an updated version of the `main()` function using a loop:

```
int main() {
    bool playAgain = true;
    while (playAgain) {
        mathQuiz();
        char response;
        std::cout << "Play again? (y/n): ";
        std::cin >> response;
        playAgain = (response == 'y' || response == 'Y');
    }
    return 0;
}
```

_Benefits of using a loop:_

1. Avoids potential stack overflow issues with recursive calls.
2. Improves code readability and maintainability.
3. Reduces function call overhead.

_How it works:_

1. The `while` loop continues as long as `playAgain` is `true`.
2. Inside the loop, the game is played by calling `mathQuiz()`.
3. After the game, the user is prompted to play again.
4. If the user responds with 'y' or 'Y', `playAgain` remains `true`, and the loop repeats.
5. If the user responds with 'n' or any other input, `playAgain` becomes `false`, and the loop exits.

This approach is more efficient, scalable, and easier to understand than recursive function calls for this specific use case.


#include <iostream>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <cmath>  // For fabs()

// Math operations
enum Operation { ADD, SUB, MUL, DIV };

// Seed random generator once at program start
void initRandom() {
    static bool seeded = false;
    if (!seeded) {
        srand(time(0));
        seeded = true;
    }
}

char getOperationSymbol(Operation op) {
    switch (op) {
        case ADD: return '+';
        case SUB: return '-';
        case MUL: return '*';
        case DIV: return '/';
        default: throw std::invalid_argument("Invalid operation");
    }
}

double performOperation(Operation op, double num1, double num2) {
    switch (op) {
        case ADD: return num1 + num2;
        case SUB: return num1 - num2;
        case MUL: return num1 * num2;
        case DIV: 
            if (num2 == 0) throw std::runtime_error("Division by zero");
            return num1 / num2;
        default: throw std::invalid_argument("Invalid operation");
    }
}

void generateNumbers(Operation op, double& num1, double& num2) {
    num1 = rand() % 10 + 1;
    num2 = rand() % 10 + 1;
    
    // Ensure non-negative results for subtraction
    if (op == SUB && num2 > num1) {
        std::swap(num1, num2);
    }
    
    // Ensure whole number results for division
    if (op == DIV) {
        num1 = num2 * (rand() % 5 + 1);  // Results in 1-5 times divisor
    }
}

void mathQuiz() {
    const int totalQuestions = 10;
    int score = 0;
    const double EPSILON = 0.001;  // For floating-point comparisons

    std::cout << "\nMath Quiz Game\n";
    std::cout << "Answer correctly to earn points!\n";
    std::cout << "-------------------------------\n";

    for (int i = 0; i < totalQuestions; ++i) {
        Operation op = static_cast<Operation>(rand() % 4);
        double num1, num2;
        generateNumbers(op, num1, num2);

        double correctAnswer = performOperation(op, num1, num2);
        double userAnswer;
        bool validInput = false;

        std::cout << "\nQuestion " << (i+1) << "/" << totalQuestions << "\n";
        std::cout << "What is " << num1 << " " << getOperationSymbol(op) << " " << num2 << "? ";

        while (!validInput) {
            if (!(std::cin >> userAnswer)) {
                std::cout << "Invalid input! Please enter a number: ";
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            } else {
                validInput = true;
            }
        }

        // Compare with tolerance for floating-point answers
        if (op == DIV ? fabs(userAnswer - correctAnswer) < EPSILON 
                      : userAnswer == correctAnswer) {
            std::cout << "✓ Correct!\n";
            score++;
        } else {
            std::cout << "✗ Wrong! The correct answer is " << correctAnswer << "\n";
        }
        
        std::cout << "Current score: " << score << "/" << (i+1) << "\n";
    }

    std::cout << "\nQuiz finished! Final score: " << score << "/" << totalQuestions << "\n";
    std::cout << "Percentage: " << (score * 100 / totalQuestions) << "%\n";
}

int main() {
    initRandom();
    bool playAgain = true;
    
    std::cout << "Welcome to the Math Quiz Game!\n";
    
    while (playAgain) {
        mathQuiz();
        
        char response;
        std::cout << "\nPlay again? (y/n): ";
        std::cin >> response;
        playAgain = (response == 'y' || response == 'Y');
        
        // Clear input buffer
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    }
    
    std::cout << "\nThanks for playing! Goodbye!\n";
    return 0;
}