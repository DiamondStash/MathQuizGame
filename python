# Imports
import pyinputplus as pyip
from random import choice

# Constants
QUESTION_TYPES = ['+', '-', '*', '/', '**']
NUMBERS_RANGE = range(1, 20)
MAX_TIMEOUT = 10

# Game variables
points = 0

# Hints
print("Round down to one number after the comma.")
print("When asked to press enter to continue, type 'stop' to stop.\n")

def generate_equation():
    """Generate a random math equation."""
    num1, num2 = choice(NUMBERS_RANGE), choice(NUMBERS_RANGE)
    operator = choice(QUESTION_TYPES)
    return f"{num1} {operator} {num2}", round(eval(f"{num1} {operator} {num2}"), 1)

def game_loop():
    """Run the math game loop."""
    global points
    while True:
        equation, solution = generate_equation()
        try:
            user_answer = pyip.inputNum(
                prompt=f"What is {equation} equal to? ",
                allowRegexes=["^stop$"],
                blockRegexes=[(".*", "Incorrect! Try again.")],
                timeout=MAX_TIMEOUT,
            )
            if user_answer == "stop":
                print(f"Game over! Your final score: {points} points.")
                break
            elif user_answer == solution:
                points += 1
                print(f"Correct! You now have {points} points.\n")
            else:
                print(f"Incorrect! The correct answer was {solution}.\n")
        except pyip.TimeoutException:
            print("Time's up! You didn't answer in time. Game over!")
            break

if __name__ == "__main__":
    game_loop()
```

Changes made:

1. Improved code organization and structure.
2. Added constants for better readability.
3. Extracted equation generation into a separate function.
4. Used f-strings for more readable string formatting.
5. Added a `global` keyword to modify the `points` variable.
6. Included a `if __name__ == "__main__":` block to ensure the game loop runs only when the script is executed directly.
